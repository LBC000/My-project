主题
要达到的效果
执行步骤
1、
  1.使用rem布局，用淘宝的lib-flexible。用less来写css。(好处：动态设置根字体大小，只要引用后就不用做其他设置，lib-flexible自动计算)
  2.设计稿640*1136.根字体32px(lib-flexible自动计算)。转换插件设置64px。写css时直接走设计稿尺寸。
2、使用定时器时会使用回调函数，要注意存一个let _this=this;
3、react定时器问题
        在componentDidMount设置setTimeout，然后在componentWillUnmount取消。
            // 如果存在this.timer，则使用clearTimeout清空。
            componentWillUnmount(){this.timer && clearTimeout(this.timer)}; 
4、可上下、左右滚动，隐藏滚动条
	1.用两个div嵌套。
	2.外面的盒子overflow: hidden; 
	3.上下拖动两个盒子的高要相同。里面的盒子宽要比外面的盒子大。样式里加overflow-y: auto;
  overflow-x: hidden;
	4.左右拖动两个盒子的宽要相同。里面的盒子高要比外面的盒子高。样式里加overflow-x: auto;
  overflow-y: hidden;
	
5、在同一个组件下创建木偶组件，木偶组件和父组件state的关系
6、头部固定定位
7、title组件复用

8、本地和网络的图片都可以统一使用以下格式。**本地音频也要require包一下**
	this.state = { 
            footerDate:{
                // footerLogo:require('../../../../img/footerLogo.png')
                footerLogo:'http://www.wookmark.com/images/original/666618_wookmark.jpg'
            }
         }
	let {footerDate:{footerLogo}}=this.state;
	<img src={require(footerLogo)} alt=""/>

require里不能放变量。以下格式报错
	this.state = { 
            footerDate:{
                footerLogo:'../../../../img/footerLogo.png'
            }
         }
	let {footerDate:{footerLogo}}=this.state;
	<img src={require(footerLogo)} alt=""/>

9、Link to 传值。需要配合Route匹配使用。
<li>
    <Link to={ 
        { 
            pathname:"/jump", 
            hash:'#ahash',  
            query:{foo: 'foo', boo:'boo'},  
            state:{data:'hello'}   
        } 
    } activeClassName="GlobalNav-active">点击跳转
    </Link> 
</li>
接收
    匹配的路由会成一个对象，对象里会有数据



